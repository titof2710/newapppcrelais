import 'package:flutter/material.dart';  import '../../models/user_model.dart';  import '../../models/admin_model.dart';  import '../../models/point_relais_model.dart';  import '../../models/technicien_model.dart';  import '../../models/client_model.dart';  import '../../services/admin_service.dart';  import '../../services/point_relais_service.dart';  import '../../theme/app_theme.dart';    /// Écran de gestion des utilisateurs pour les administrateurs  class UsersManagementScreen extends StatefulWidget {    const UsersManagementScreen({super.key});      @override    State<UsersManagementScreen> createState() => _UsersManagementScreenState();  }    class _UsersManagementScreenState extends State<UsersManagementScreen> {    final AdminService _adminService = AdminService();    final PointRelaisService _pointRelaisService = PointRelaisService();        List<UserModel> _users = [];    bool _isLoading = true;    String _searchQuery = '';    String _filterType = 'all';        @override    void initState() {      super.initState();      _loadUsers();    }        Future<void> _loadUsers() async {      setState(() {        _isLoading = true;      });            try {        final users = await _adminService.getAllUsers();                setState(() {          _users = users;          _isLoading = false;        });      } catch (e) {        setState(() {          _isLoading = false;        });                ScaffoldMessenger.of(context).showSnackBar(          SnackBar(content: Text('Erreur lors du chargement des utilisateurs: $e')),        );      }    }        List<UserModel> get _filteredUsers {      return _users.where((user) {        // Appliquer le filtre de recherche        final matchesSearch = user.name.toLowerCase().contains(_searchQuery.toLowerCase()) ||            user.email.toLowerCase().contains(_searchQuery.toLowerCase()) ||            user.phoneNumber.toLowerCase().contains(_searchQuery.toLowerCase());                // Appliquer le filtre de type d'utilisateur        final matchesType = _filterType == 'all' || user.userType == _filterType;                return matchesSearch && matchesType;      }).toList();    }        @override    Widget build(BuildContext context) {      return Scaffold(        appBar: AppBar(          title: const Text('Gestion des utilisateurs'),          backgroundColor: AppTheme.primaryColor,          actions: [            IconButton(              icon: const Icon(Icons.refresh),              onPressed: _loadUsers,            ),          ],        ),        floatingActionButton: FloatingActionButton(          onPressed: () {            _showAddUserDialog(context);          },          backgroundColor: AppTheme.primaryColor,          child: const Icon(Icons.add),        ),        body: Column(          children: [            _buildSearchAndFilterBar(),            Expanded(              child: _isLoading                  ? const Center(child: CircularProgressIndicator())                  : _filteredUsers.isEmpty                      ? const Center(                          child: Text(                            'Aucun utilisateur trouvé',                            style: TextStyle(fontSize: 18),                          ),                        )                      : ListView.builder(                          itemCount: _filteredUsers.length,                          itemBuilder: (context, index) {                            final user = _filteredUsers[index];                            return _buildUserCard(user);                          },                        ),            ),          ],        ),      );    }        Widget _buildSearchAndFilterBar() {      return Padding(        padding: const EdgeInsets.all(16.0),        child: Column(          children: [            TextField(              decoration: InputDecoration(                hintText: 'Rechercher un utilisateur...',                prefixIcon: const Icon(Icons.search),                border: OutlineInputBorder(                  borderRadius: BorderRadius.circular(10),                ),              ),              onChanged: (value) {                setState(() {                  _searchQuery = value;                });              },            ),            const SizedBox(height: 16),            SingleChildScrollView(              scrollDirection: Axis.horizontal,              child: Row(                children: [                  _buildFilterChip('Tous', 'all'),                  const SizedBox(width: 8),                  _buildFilterChip('Clients', 'client'),                  const SizedBox(width: 8),                  _buildFilterChip('Points Relais', 'point_relais'),                  const SizedBox(width: 8),                  _buildFilterChip('Administrateurs', 'admin'),                ],              ),            ),          ],        ),      );    }        Widget _buildFilterChip(String label, String value) {      final isSelected = _filterType == value;            return FilterChip(        label: Text(label),        selected: isSelected,        onSelected: (selected) {          setState(() {            _filterType = selected ? value : 'all';          });        },        backgroundColor: Colors.grey[200],        selectedColor: AppTheme.primaryColor.withOpacity(0.2),        checkmarkColor: AppTheme.primaryColor,      );    }        Widget _buildUserCard(UserModel user) {      Color avatarColor;      IconData userTypeIcon;            switch (user.userType) {        case 'client':          avatarColor = Colors.blue;          userTypeIcon = Icons.person;          break;        case 'point_relais':          avatarColor = Colors.green;          userTypeIcon = Icons.store;          break;        case 'admin':          avatarColor = Colors.red;          userTypeIcon = Icons.admin_panel_settings;          break;        default:          avatarColor = Colors.grey;          userTypeIcon = Icons.person;      }            return Card(        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),        child: ListTile(          leading: CircleAvatar(            backgroundColor: avatarColor,            child: Icon(userTypeIcon, color: Colors.white),          ),          title: Text(user.name),          subtitle: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Text(user.email),              Text(user.phoneNumber),              Text('Créé le: ${_formatDate(user.createdAt)}'),            ],          ),          isThreeLine: true,          trailing: Row(            mainAxisSize: MainAxisSize.min,            children: [              IconButton(                icon: const Icon(Icons.edit, color: Colors.blue),                onPressed: () {                  _showEditUserDialog(context, user);                },              ),              IconButton(                icon: const Icon(Icons.delete, color: Colors.red),                onPressed: () {                  _showDeleteUserDialog(context, user);                },              ),            ],          ),          onTap: () {            _showUserDetailsDialog(context, user);          },        ),      );    }        String _formatDate(DateTime date) {      return '${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}';    }        void _showUserDetailsDialog(BuildContext context, UserModel user) {      showDialog(        context: context,        builder: (context) {          return AlertDialog(            title: Text('Détails de ${user.name}'),            content: SingleChildScrollView(              child: Column(                crossAxisAlignment: CrossAxisAlignment.start,                mainAxisSize: MainAxisSize.min,                children: [                  _buildDetailRow('ID', user.id),                  _buildDetailRow('Nom', user.name),                  _buildDetailRow('Email', user.email),                  _buildDetailRow('Téléphone', user.phoneNumber),                  _buildDetailRow('Type', _getUserTypeLabel(user.userType)),                  _buildDetailRow('Créé le', _formatDate(user.createdAt)),                  if (user is AdminModel) ...[                    const Divider(),                    _buildDetailRow('Rôle', user.role),                    const Text(                      'Permissions:',                      style: TextStyle(fontWeight: FontWeight.bold),                    ),                    const SizedBox(height: 4),                    ...user.permissions.map((permission) => Text('• $permission')),                  ],                ],              ),            ),            actions: [              TextButton(                onPressed: () {                  Navigator.of(context).pop();                },                child: const Text('Fermer'),              ),            ],          );        },      );    }        Widget _buildDetailRow(String label, String value) {      return Padding(        padding: const EdgeInsets.symmetric(vertical: 4),        child: Row(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            SizedBox(              width: 100,              child: Text(                '$label:',                style: const TextStyle(fontWeight: FontWeight.bold),              ),            ),            Expanded(              child: Text(value),            ),          ],        ),      );    }        String _getUserTypeLabel(String userType) {      switch (userType) {        case 'client':          return 'Client';        case 'point_relais':          return 'Point Relais';        case 'admin':          return 'Administrateur';        default:          return userType;      }    }        void _showAddUserDialog(BuildContext context) {      final TextEditingController nameController = TextEditingController();      final TextEditingController emailController = TextEditingController();      final TextEditingController passwordController = TextEditingController();      final TextEditingController phoneController = TextEditingController();      final TextEditingController addressController = TextEditingController();            // Champs spécifiques pour point relais      final TextEditingController shopNameController = TextEditingController();      final TextEditingController shopAddressController = TextEditingController();      final TextEditingController openingHoursController = TextEditingController();      final TextEditingController storageCapacityController = TextEditingController(text: '10');            // Champs spécifiques pour technicien      final TextEditingController specialityController = TextEditingController();      final TextEditingController experienceYearsController = TextEditingController(text: '0');      final TextEditingController certificationsController = TextEditingController();            showDialog(        context: context,        builder: (context) {          return StatefulBuilder(            builder: (context, setState) {              // Déclarer la variable userType à l'intérieur du StatefulBuilder              String userType = 'client';                            // Formulaire pour les champs communs à tous les types d'utilisateurs              Widget commonFields = Column(                mainAxisSize: MainAxisSize.min,                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  DropdownButtonFormField<String>(                    decoration: const InputDecoration(                      labelText: 'Type d\'utilisateur',                      border: OutlineInputBorder(),                    ),                    value: userType,                    items: const [                      DropdownMenuItem(value: 'client', child: Text('Client')),                      DropdownMenuItem(value: 'point_relais', child: Text('Point Relais')),                      DropdownMenuItem(value: 'technicien', child: Text('Technicien')),                      DropdownMenuItem(value: 'admin', child: Text('Administrateur')),                    ],                    onChanged: (value) {                      if (value != null) {                        setState(() {                          userType = value;                        });                      }                    },                  ),                  const SizedBox(height: 16),                  TextField(                    controller: nameController,                    decoration: const InputDecoration(                      labelText: 'Nom complet',                      border: OutlineInputBorder(),                    ),                  ),                  const SizedBox(height: 16),                  TextField(                    controller: emailController,                    decoration: const InputDecoration(                      labelText: 'Email',                      border: OutlineInputBorder(),                    ),                    keyboardType: TextInputType.emailAddress,                  ),                  const SizedBox(height: 16),                  TextField(                    controller: passwordController,                    decoration: const InputDecoration(                      labelText: 'Mot de passe',                      border: OutlineInputBorder(),                    ),                    obscureText: true,                  ),                  const SizedBox(height: 16),                  TextField(                    controller: phoneController,                    decoration: const InputDecoration(                      labelText: 'Téléphone',                      border: OutlineInputBorder(),                    ),                    keyboardType: TextInputType.phone,                  ),                  const SizedBox(height: 16),                  TextField(                    controller: addressController,                    decoration: const InputDecoration(                      labelText: 'Adresse',                      border: OutlineInputBorder(),                    ),                    maxLines: 2,                  ),        ],      );            // Champs spécifiques au point relais      Widget pointRelaisFields = Column(        mainAxisSize: MainAxisSize.min,        crossAxisAlignment: CrossAxisAlignment.start,        children: [          const SizedBox(height: 16),          const Divider(),          const Text(            'Informations du point relais',            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),          ),          const SizedBox(height: 16),          TextField(            controller: shopNameController,            decoration: const InputDecoration(              labelText: 'Nom du commerce',              border: OutlineInputBorder(),            ),          ),          const SizedBox(height: 16),          TextField(            controller: shopAddressController,            decoration: const InputDecoration(              labelText: 'Adresse du commerce',              border: OutlineInputBorder(),            ),            maxLines: 2,          ),          const SizedBox(height: 16),          TextField(            controller: openingHoursController,            decoration: const InputDecoration(              labelText: 'Horaires d\'ouverture (séparés par des virgules)',              hintText: 'Lun-Ven: 9h-18h, Sam: 9h-12h',              border: OutlineInputBorder(),            ),          ),          const SizedBox(height: 16),          TextField(            controller: storageCapacityController,            decoration: const InputDecoration(              labelText: 'Capacité de stockage',              border: OutlineInputBorder(),            ),            keyboardType: TextInputType.number,          ),        ],      );            // Champs spécifiques au technicien      Widget technicienFields = Column(        mainAxisSize: MainAxisSize.min,        crossAxisAlignment: CrossAxisAlignment.start,        children: [          const SizedBox(height: 16),          const Divider(),          const Text(            'Informations du technicien',            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),          ),          const SizedBox(height: 16),          TextField(            controller: specialityController,            decoration: const InputDecoration(              labelText: 'Spécialités (séparées par des virgules)',              hintText: 'PC, Mac, Imprimantes, ...',              border: OutlineInputBorder(),            ),          ),          const SizedBox(height: 16),          TextField(            controller: experienceYearsController,            decoration: const InputDecoration(              labelText: 'Années d\'expérience',              border: OutlineInputBorder(),            ),            keyboardType: TextInputType.number,          ),          const SizedBox(height: 16),          TextField(            controller: certificationsController,            decoration: const InputDecoration(              labelText: 'Certifications (séparées par des virgules)',              hintText: 'Apple Certified, Microsoft Certified, ...',              border: OutlineInputBorder(),            ),          ),        ],      );            showDialog(        context: context,        builder: (context) {          return StatefulBuilder(            builder: (context, setState) {              return AlertDialog(                title: const Text('Ajouter un utilisateur'),                content: SingleChildScrollView(                  child: Column(                    mainAxisSize: MainAxisSize.min,                    children: [                      commonFields,                      if (userType == 'point_relais') pointRelaisFields,                      if (userType == 'technicien') technicienFields,                    ],                  ),                ),                actions: [                  TextButton(                    onPressed: () {                      Navigator.of(context).pop();                    },                    child: const Text('Annuler'),                  ),                  TextButton(                    onPressed: () async {                      // Validation des champs                      if (nameController.text.isEmpty ||                          emailController.text.isEmpty ||                          passwordController.text.isEmpty ||                          phoneController.text.isEmpty) {                        ScaffoldMessenger.of(context).showSnackBar(                          const SnackBar(content: Text('Veuillez remplir tous les champs obligatoires')),                        );                        return;                      }                                            // Validation spécifique pour point relais                      if (userType == 'point_relais' &&                           (shopNameController.text.isEmpty ||                           shopAddressController.text.isEmpty ||                           openingHoursController.text.isEmpty)) {                        ScaffoldMessenger.of(context).showSnackBar(                          const SnackBar(content: Text('Veuillez remplir tous les champs du point relais')),                        );                        return;                      }                                            // Validation spécifique pour technicien                      if (userType == 'technicien' && specialityController.text.isEmpty) {                        ScaffoldMessenger.of(context).showSnackBar(                          const SnackBar(content: Text('Veuillez indiquer au moins une spécialité pour le technicien')),                        );                        return;                      }                                            try {                        Navigator.of(context).pop();                                                setState(() {                          _isLoading = true;                        });                                                // Création de l'utilisateur en fonction du type                        if (userType == 'admin') {                          await _adminService.createAdmin(                            email: emailController.text.trim(),                            password: passwordController.text,                            name: nameController.text.trim(),                            phoneNumber: phoneController.text.trim(),                          );                        } else if (userType == 'point_relais') {                          await _pointRelaisService.createPointRelais(                            email: emailController.text.trim(),                            password: passwordController.text,                            name: nameController.text.trim(),                            phoneNumber: phoneController.text.trim(),                            address: addressController.text.trim(),                            shopName: shopNameController.text.trim(),                            shopAddress: shopAddressController.text.trim(),                            openingHours: openingHoursController.text.split(',').map((s) => s.trim()).toList(),                            storageCapacity: int.tryParse(storageCapacityController.text) ?? 10,                          );                        } else if (userType == 'technicien') {                          await _adminService.createTechnicien(                            email: emailController.text.trim(),                            password: passwordController.text,                            name: nameController.text.trim(),                            phoneNumber: phoneController.text.trim(),                            address: addressController.text.trim(),                            speciality: specialityController.text.split(',').map((s) => s.trim()).toList(),                            experienceYears: int.tryParse(experienceYearsController.text) ?? 0,                            certifications: certificationsController.text.split(',').map((s) => s.trim()).toList(),                          );                        } else if (userType == 'client') {                          await _adminService.createClient(                            email: emailController.text.trim(),                            password: passwordController.text,                            name: nameController.text.trim(),                            phoneNumber: phoneController.text.trim(),                            address: addressController.text.trim(),                          );                        }                                                // Recharger la liste des utilisateurs                        await _loadUsers();                                                if (context.mounted) {                          ScaffoldMessenger.of(context).showSnackBar(                            const SnackBar(content: Text('Utilisateur créé avec succès')),                          );                        }                      } catch (e) {                        setState(() {                          _isLoading = false;                        });                                                if (context.mounted) {                          ScaffoldMessenger.of(context).showSnackBar(                            SnackBar(content: Text('Erreur lors de la création: $e')),                          );                        }                      }                    },                    child: const Text('Ajouter'),                  ),                ],              );            },          );        },      );    }        void _showDeleteUserDialog(BuildContext context, UserModel user) {      bool isLoading = false;            showDialog(        context: context,        builder: (context) {          return StatefulBuilder(            builder: (context, setState) {              return AlertDialog(                title: const Text('Confirmer la suppression'),                content: Text(                  'Êtes-vous sûr de vouloir supprimer l\'utilisateur ${user.name} ? Cette action est irréversible.'                ),                actions: [                  TextButton(                    onPressed: () {                      Navigator.of(context).pop();                    },                    child: const Text('Annuler'),                  ),                  if (isLoading)                    const CircularProgressIndicator()                  else                    TextButton(                      onPressed: () async {                        setState(() {                          isLoading = true;                        });                                                try {                          await _adminService.deleteUser(user.id);                                                    // Recharger la liste des utilisateurs                          await _loadUsers();                                                    if (context.mounted) {                            Navigator.of(context).pop();                            ScaffoldMessenger.of(context).showSnackBar(                              const SnackBar(content: Text('Utilisateur supprimé avec succès')),                            );                          }                        } catch (e) {                          setState(() {                            isLoading = false;                          });                                                    if (context.mounted) {                            ScaffoldMessenger.of(context).showSnackBar(                              SnackBar(content: Text('Erreur lors de la suppression: $e')),                            );                          }                        }                      },                      style: TextButton.styleFrom(                        foregroundColor: Colors.red,                      ),                      child: const Text('Supprimer'),                    ),                ],              );            },          );        },      );    }      void _showEditUserDialog(BuildContext context, UserModel user) {      final nameController = TextEditingController(text: user.name);      final emailController = TextEditingController(text: user.email);      final phoneController = TextEditingController(text: user.phoneNumber);      final addressController = TextEditingController(text: user.address ?? '');            // Contrôleurs spécifiques au type d'utilisateur      // Point Relais      final shopNameController = TextEditingController();      final shopAddressController = TextEditingController();      final openingHoursController = TextEditingController();      final storageCapacityController = TextEditingController();            // Technicien      final specialityController = TextEditingController();      final experienceYearsController = TextEditingController();      final certificationsController = TextEditingController();            // Client      final repairIdsController = TextEditingController();            // Initialiser les contrôleurs spécifiques selon le type d'utilisateur      if (user is PointRelaisModel) {        shopNameController.text = user.shopName;        shopAddressController.text = user.shopAddress;        openingHoursController.text = user.openingHours.join(', ');        storageCapacityController.text = user.storageCapacity.toString();      } else if (user is TechnicienModel) {        specialityController.text = user.speciality.join(', ');        experienceYearsController.text = user.experienceYears.toString();        certificationsController.text = user.certifications.join(', ');      } else if (user is ClientModel) {        repairIdsController.text = user.repairIds.join(', ');      }            final formKey = GlobalKey<FormState>();      bool isLoading = false;            showDialog(        context: context,        builder: (context) {          return StatefulBuilder(            builder: (context, setState) {              return AlertDialog(                title: Text('Modifier ${user.name}'),                content: SingleChildScrollView(                  child: Form(                    key: formKey,                    child: Column(                      mainAxisSize: MainAxisSize.min,                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        // Informations de base pour tous les utilisateurs                        TextFormField(                          controller: nameController,                          decoration: const InputDecoration(labelText: 'Nom complet'),                          validator: (value) {                            if (value == null || value.isEmpty) {                              return 'Veuillez entrer un nom';                            }                            return null;                          },                        ),                        const SizedBox(height: 16),                        TextFormField(                          controller: emailController,                          decoration: const InputDecoration(labelText: 'Email'),                          validator: (value) {                            if (value == null || value.isEmpty) {                              return 'Veuillez entrer un email';                            }                            if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {                              return 'Veuillez entrer un email valide';                            }                            return null;                          },                        ),                        const SizedBox(height: 16),                        TextFormField(                          controller: phoneController,                          decoration: const InputDecoration(labelText: 'Téléphone'),                          validator: (value) {                            if (value == null || value.isEmpty) {                              return 'Veuillez entrer un numéro de téléphone';                            }                            return null;                          },                        ),                        const SizedBox(height: 16),                        TextFormField(                          controller: addressController,                          decoration: const InputDecoration(labelText: 'Adresse'),                        ),                                                // Champs spécifiques pour les points relais                        if (user is PointRelaisModel) ...[                                                  const SizedBox(height: 24),                          const Text(                            'Informations du point relais',                            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),                          ),                          const SizedBox(height: 16),                          TextFormField(                            controller: shopNameController,                            decoration: const InputDecoration(labelText: 'Nom du commerce'),                            validator: (value) {                              if (value == null || value.isEmpty) {                                return 'Veuillez entrer le nom du commerce';                              }                              return null;                            },                          ),                          const SizedBox(height: 16),                          TextFormField(                            controller: shopAddressController,                            decoration: const InputDecoration(labelText: 'Adresse du commerce'),                            validator: (value) {                              if (value == null || value.isEmpty) {                                return 'Veuillez entrer l\'adresse du commerce';                              }                              return null;                            },                          ),                          const SizedBox(height: 16),                          TextFormField(                            controller: openingHoursController,                            decoration: const InputDecoration(                              labelText: 'Horaires d\'ouverture',                              hintText: 'Lun: 9h-18h, Mar: 9h-18h, ...',                            ),                            validator: (value) {                              if (value == null || value.isEmpty) {                                return 'Veuillez entrer les horaires d\'ouverture';                              }                              return null;                            },                          ),                          const SizedBox(height: 16),                          TextFormField(                            controller: storageCapacityController,                            decoration: const InputDecoration(labelText: 'Capacité de stockage'),                            keyboardType: TextInputType.number,                            validator: (value) {                              if (value == null || value.isEmpty) {                                return 'Veuillez entrer la capacité de stockage';                              }                              if (int.tryParse(value) == null) {                                return 'Veuillez entrer un nombre valide';                              }                              return null;                            },                          ),                        ],                                                // Champs spécifiques pour les techniciens                        if (user is TechnicienModel) ...[                                                  const SizedBox(height: 24),                          const Text(                            'Informations du technicien',                            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),                          ),                          const SizedBox(height: 16),                          TextFormField(                            controller: specialityController,                            decoration: const InputDecoration(                              labelText: 'Spécialités',                              hintText: 'PC, Mac, Imprimantes, ...',                            ),                            validator: (value) {                              if (value == null || value.isEmpty) {                                return 'Veuillez entrer au moins une spécialité';                              }                              return null;                            },                          ),                          const SizedBox(height: 16),                          TextFormField(                            controller: experienceYearsController,                            decoration: const InputDecoration(labelText: 'Années d\'expérience'),                            keyboardType: TextInputType.number,                            validator: (value) {                              if (value == null || value.isEmpty) {                                return 'Veuillez entrer le nombre d\'années d\'expérience';                              }                              if (int.tryParse(value) == null) {                                return 'Veuillez entrer un nombre valide';                              }                              return null;                            },                          ),                          const SizedBox(height: 16),                          TextFormField(                            controller: certificationsController,                            decoration: const InputDecoration(                              labelText: 'Certifications',                              hintText: 'Apple Certified, Microsoft Certified, ...',                            ),                          ),                        ],                                                // Champs spécifiques pour les clients                        if (user is ClientModel) ...[                                                  const SizedBox(height: 24),                          const Text(                            'Informations du client',                            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),                          ),                          const SizedBox(height: 16),                          TextFormField(                            controller: repairIdsController,                            decoration: const InputDecoration(                              labelText: 'IDs des réparations',                              hintText: 'Liste des réparations associées',                            ),                            readOnly: true, // Les réparations ne devraient pas être modifiées directement                          ),                        ],                      ],                    ),                  ),                ),                actions: [                  TextButton(                    onPressed: () {                      Navigator.of(context).pop();                    },                    child: const Text('Annuler'),                  ),                  if (isLoading)                    const CircularProgressIndicator()                  else                    TextButton(                      onPressed: () async {                        if (formKey.currentState!.validate()) {                          setState(() {                            isLoading = true;                          });                                                    try {                            UserModel updatedUser;                                                        // Mettre à jour l'utilisateur en fonction de son type                            if (user is PointRelaisModel) {                              final pointRelaisUser = user as PointRelaisModel;                              updatedUser = pointRelaisUser.copyWith(                                name: nameController.text.trim(),                                email: emailController.text.trim(),                                phoneNumber: phoneController.text.trim(),                                address: addressController.text.trim(),                                shopName: shopNameController.text.trim(),                                shopAddress: shopAddressController.text.trim(),                                openingHours: openingHoursController.text.split(',').map((e) => e.trim()).toList(),                                storageCapacity: int.parse(storageCapacityController.text.trim()),                              );                            } else if (user is TechnicienModel) {                              final technicienUser = user as TechnicienModel;                              updatedUser = technicienUser.copyWith(                                name: nameController.text.trim(),                                email: emailController.text.trim(),                                phoneNumber: phoneController.text.trim(),                                address: addressController.text.trim(),                                speciality: specialityController.text.split(',').map((e) => e.trim()).toList(),                                experienceYears: int.parse(experienceYearsController.text.trim()),                                certifications: certificationsController.text.split(',').map((e) => e.trim()).toList(),                              );                            } else if (user is ClientModel) {                              final clientUser = user as ClientModel;                              updatedUser = clientUser.copyWith(                                name: nameController.text.trim(),                                email: emailController.text.trim(),                                phoneNumber: phoneController.text.trim(),                                address: addressController.text.trim(),                              );                            } else {                              // Pour les autres types d'utilisateurs                              updatedUser = user.copyWith(                                name: nameController.text.trim(),                                email: emailController.text.trim(),                                phoneNumber: phoneController.text.trim(),                                address: addressController.text.trim(),                              );                            }                                                        await _adminService.updateUser(updatedUser);                                                        // Recharger la liste des utilisateurs                            await _loadUsers();                                                        if (context.mounted) {                              Navigator.of(context).pop();                              ScaffoldMessenger.of(context).showSnackBar(                                const SnackBar(content: Text('Utilisateur mis à jour avec succès')),                              );                            }                          } catch (e) {                            setState(() {                              isLoading = false;                            });                                                        if (context.mounted) {                              ScaffoldMessenger.of(context).showSnackBar(                                SnackBar(content: Text('Erreur lors de la mise à jour: $e')),                              );                            }                          }                        }                      },                      child: const Text('Enregistrer'),                    ),                ],              );            },          );        },      );    }        void _showDeleteConfirmationDialog(BuildContext context, UserModel user) {      showDialog(        context: context,        builder: (context) {          return AlertDialog(            title: const Text('Confirmer la suppression'),            content: Text('Êtes-vous sûr de vouloir supprimer ${user.name} ?'),            actions: [              TextButton(                onPressed: () {                  Navigator.of(context).pop();                },                child: const Text('Annuler'),              ),              TextButton(                onPressed: () async {                  Navigator.of(context).pop();                                    setState(() {                    _isLoading = true;                  });                                    try {                    await _adminService.deleteUser(user.id);                                        // Recharger la liste des utilisateurs                    await _loadUsers();                                        if (context.mounted) {                      ScaffoldMessenger.of(context).showSnackBar(                        const SnackBar(content: Text('Utilisateur supprimé avec succès')),                      );                    }                  } catch (e) {                    setState(() {                      _isLoading = false;                    });                                        if (context.mounted) {                      ScaffoldMessenger.of(context).showSnackBar(                        SnackBar(content: Text('Erreur lors de la suppression: $e')),                      );                    }                  }                },                style: TextButton.styleFrom(foregroundColor: Colors.red),                child: const Text('Supprimer'),              ),            ],          );        },      );    }  }  